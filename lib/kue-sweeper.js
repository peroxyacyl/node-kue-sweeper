// Generated by CoffeeScript 1.7.1
(function() {
  var Job, config, kue, p, redis, _;

  p = require("commander");

  redis = require("redis");

  _ = require("underscore");

  config = require("config");

  kue = require('kue');

  Job = kue.Job;

  p.version('0.0.1').option('-p, --port <n>', 'redis service port').option('-h, --host [VALUE]', 'redis service host').parse(process.argv);

  p.port = p.port || (config.redis ? config.redis.port : void 0) || 6379;

  p.host = p.host || (config.redis ? config.redis.host : void 0) || "localhost";

  kue.redis.createClient = function() {
    var client;
    client = redis.createClient(p.port, p.host);
    client.on("error", function(error) {
      console.error("[kue-sweeper::redis::on error] " + error);
    });
    client.on("reconnecting", function(info) {
      console.log("[kue-sweeper::redis::on ready] reconnecting to datastore... delay:" + info.delay + ", attempt:" + info.attempt);
    });
    client.on("end", function() {
      console.error("[kue-sweeper::redis::on end] redis client end @ " + p.host + ":" + p.port);
    });
    client.on("ready", function() {
      console.info("[kue-sweeper::redis::on ready] kue client is ready to monitor redis server @ " + p.host + ":" + p.port);
    });
    return client;
  };

  kue.createQueue().on('job complete', function(id) {
    Job.get(id, function(err, job) {
      if ((err != null) || (job == null)) {
        console.warn("[kue-sweeper::on job completed] fail to get job: " + id + ". error:" + err);
        return;
      }
      console.log("[kue-sweeper::removeKueJob] job:" + job.id);
      if (!((job != null) && _.isFunction(job.remove))) {
        console.error("[kue-sweeper::removeKueJob] bad argument, " + job);
        return;
      } else {
        job.remove();
      }
    });
  });

  process.on('uncaughtException', function(error) {
    return console.log("[kue-sweeper::uncaughtException] " + error + ", stack:" + error.stack);
  });

  console.info("[kue-sweeper::init] service is up for redis server @ " + p.host + ":" + p.port);

}).call(this);
